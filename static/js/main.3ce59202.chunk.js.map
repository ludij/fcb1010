{"version":3,"sources":["App.tsx","components/led.tsx","components/footswitch.tsx","components/expressionPedal.tsx","components/modal.tsx","data/data.ts","scripts/midi.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["midiSuccess","midiSupport","SCLed","styled","isActive","CFootswitch","label","data","toggleFootswitch","useState","isPressed","setPressed","togglePressed","footswitchIndex","parseInt","toggleActive","sFootswitch","css","sFootswitchToggle","onMouseDown","onTouchStart","onMouseUp","mode","onTouchEnd","onContextMenu","event","preventDefault","CExpressionPedal","sliderContainer","useRef","slider","width","height","sliderDimensions","setSliderDimensions","useEffect","current","offsetHeight","offsetWidth","sExpressionPedal","sExpressionPedalSliderContainer","sExpressionPedalSlider","ref","htmlFor","name","type","min","max","CModal","updateData","isVisible","toggleVisibility","sModal","onClick","map","item","index","value","onChange","args","newValue","target","pedalsDataIndex","pedalsDataKey","checked","programChange","programChangeIndex","newProgramChange","controlChange","controlChangeIndex","newControlChange","on","note","newNote","expressionPedalA","newExpressionPedalA","off","expressionPedalB","newExpressionPedalB","dataItem","Array","from","length","extendedItem","midi","inputs","outputs","inputKeys","initWasSuccessful","messages","midiChannel","init","navigator","requestMIDIAccess","sysex","then","onSuccess","onFailure","midiAccess","setMidiChannel","console","log","sendMidiMessage","secondNibble","thirdNibble","output","values","next","firstNibble","dataNibbles","send","this","a","s","d","f","g","w","e","r","t","y","j","u","i","k","o","l","noteOff","noteOn","App","pedals","pedalsData","setPedalsData","modalIsVisible","setModalVisibility","toggleModalVisibility","filter","indexOf","activeFootswitches","setActiveFootswitches","includes","sendMidi","sendOn","controlChanges","undefined","programChanges","sContainer","sHeader","sMidiState","sMidiSupport","footswitchNumbers","keys","toString","newPedalsData","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8KAeIA,EACAC,E,qGCVEC,EAAQC,YAAO,MAAPA,CAAH,6KAEW,qBAAGC,SAA2B,UAAY,UAKhD,qBAAGA,SAA2B,sBAAwB,U,OCOhEC,EAAc,SAAC,GAKgB,IAJnCC,EAIkC,EAJlCA,MACAC,EAGkC,EAHlCA,KACAH,EAEkC,EAFlCA,SACAI,EACkC,EADlCA,iBAEA,EAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAgB,WACpBD,GAAYD,IAORG,EAAkBC,SAASR,GAAS,EAEpCS,EAAe,WACfP,GACFA,EAAiBK,IAIfG,EAAcC,YAAH,+bAEF,aAAeX,EAKRI,EAAY,OAAS,OAI5BA,EAAY,cAAgB,QAarCQ,EAAoBD,YAAH,ycAoBvB,OACE,mBAAKA,IAAKD,EAAV,UACGT,EAAO,YAACL,EAAD,CAAOE,WAAYA,IAAe,KAC1C,0BAAIE,IACJ,mBACEW,IAAKC,EACLC,YAAa,WACXJ,IACAH,KAEFQ,aAAc,WACZL,IACAH,KAEFS,UACEd,GAAsB,WAAdA,EAAKe,KACTV,EACA,WACEG,IACAH,KAGRW,WAAY,WACVR,IACAH,KAEFY,cAlFqB,SAACC,GAC1BA,EAAMC,kBA2DJ,SAwBGnB,GAAQA,EAAKe,WC3GhBK,EAAmB,SAAC,GAEgB,IADxCrB,EACuC,EADvCA,MAEMsB,EAAkBC,iBAAuB,MACzCC,EAASD,iBAAyB,MAExC,EAAgDpB,mBAG7C,CAAEsB,MAAO,OAAQC,OAAQ,SAH5B,mBAAOC,EAAP,KAAyBC,EAAzB,KAKA,EAAgCzB,oBAAkB,GAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAgB,kBAAMD,GAAYD,IAMxCyB,qBAAU,WACR,IAAMJ,EAAQH,EAAgBQ,QAC1BR,EAAgBQ,QAAQC,aAAe,KACvC,OACEL,EAASJ,EAAgBQ,QAC3BR,EAAgBQ,QAAQE,YAAc,KACtC,OACJJ,EAAoB,CAAEF,SAAQD,YAC7B,IAEH,IAAMQ,EAAmBtB,YAAH,+eAGQX,EAERI,EAAY,OAAS,OAI5BA,EAAY,cAAgB,QAerC8B,EAAkCvB,YAAH,4uBAkC/BwB,EAAyBxB,YAAH,mlBAGTgB,EAAiBF,MACxBE,EAAiBD,QAuB7B,OACE,mBAAKf,IAAKsB,EAAV,UACE,0BAAIjC,IAEJ,mBACEW,IAAKuB,EACLrB,YAAaP,EACbQ,aAAcR,EACdS,UAAWT,EACXW,WAAYX,EACZY,cA7GqB,SAACC,GAC1BA,EAAMC,kBA6GFgB,IAAKd,EAPP,UASE,qBAAOe,QAAQ,QAAf,mBACA,qBACE1B,IAAKwB,EACLG,KAAK,QACLC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,IAAKZ,WC1HTkB,EAAS,SAAC,GAKgB,IAJ9BzC,EAI6B,EAJ7BA,KACA0C,EAG6B,EAH7BA,WAG6B,IAF7BC,iBAE6B,SAD7BC,EAC6B,EAD7BA,iBAEMC,EAASnC,YAAH,ipBAUGiC,EAAY,OAAS,oBACvBA,EAAY,IAAM,KA8B/B,OACE,mBAAKjC,IAAKmC,EAAV,UACE,sBAAQP,KAAK,SAASQ,QAASF,EAA/B,0BAGA,+BACE,8BACE,4BACE,qBACA,qCACA,oCACA,8CACA,8CACA,oCACA,kDACA,uDAGJ,8BACG5C,EAAK+C,KAAI,SAACC,EAAMC,GACf,OACE,4BACE,2BAAKA,EAAQ,IAEb,2BACE,+BACE,qBACEX,KAAK,OACLY,MAAOF,EAAKjD,MACZoD,SAAU,SAACjC,GACT,IAAMkC,EAA2B,CAC/BC,SAAUnC,EAAMoC,OAAOJ,MACvBK,gBAAiBN,EACjBO,cAAe,SAEjBd,EAAWU,MAVjB,aAiBF,4BACE,+BACE,qBACEd,KAAK,QACLD,KAAM,OAASY,EACfC,MAAM,SACNO,QAAuB,WAAdT,EAAKjC,KACdoC,SAAU,SAACjC,GACT,IAAMkC,EAA2B,CAC/BC,SAAUnC,EAAMoC,OAAOJ,MACvBK,gBAAiBN,EACjBO,cAAe,QAEjBd,EAAWU,MAZjB,YAiBA,+BACE,qBACEd,KAAK,QACLD,KAAM,OAASY,EACfC,MAAM,QACNO,QAAuB,UAAdT,EAAKjC,KACdoC,SAAU,SAACjC,GACT,IAAMkC,EAA2B,CAC/BC,SAAUnC,EAAMoC,OAAOJ,MACvBK,gBAAiBN,EACjBO,cAAe,QAEjBd,EAAWU,MAZjB,cAmBF,2BACE,2BACGJ,EAAKU,cAAcX,KAClB,SAACW,EAAeC,GACd,OACE,4BACE,+BACE,qBACErB,KAAK,WACLmB,QAASC,EAAc7D,SACvBsD,SAAU,SAACjC,GACT,IAAM0C,EAA+B,YAChCZ,EAAKU,eAEVE,EAAiBD,GAAjB,2BACKC,EAAiBD,IADtB,IAEE9D,SAAUqB,EAAMoC,OAAOG,UAOzBf,EALiC,CAC/BW,SAAUO,EACVL,gBAAiBN,EACjBO,cAAe,qBAfvB,YAsBA,+BACE,qBACElB,KAAK,SACLY,MAAOQ,EAAcA,cACrBnB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAM0C,EAA+B,YAChCZ,EAAKU,eAEVE,EAAiBD,GAAjB,2BACKC,EAAiBD,IADtB,IAEED,cAAenD,SAASW,EAAMoC,OAAOJ,SAOvCR,EALiC,CAC/BW,SAAUO,EACVL,gBAAiBN,EACjBO,cAAe,qBAjBvB,cAvBO,gBAAkBG,UAsDrC,2BACE,2BACGX,EAAKa,cAAcd,KAClB,SAACc,EAAeC,GACd,OACE,4BACE,+BACE,qBACExB,KAAK,WACLmB,QAASI,EAAchE,SACvBsD,SAAU,SAACjC,GACT,IAAM6C,EAA+B,YAChCf,EAAKa,eAEVE,EAAiBD,GAAjB,2BACKC,EAAiBD,IADtB,IAEEjE,SAAUqB,EAAMoC,OAAOG,UAOzBf,EALiC,CAC/BW,SAAUU,EACVR,gBAAiBN,EACjBO,cAAe,qBAfvB,YAsBA,+BACE,qBACElB,KAAK,SACLY,MAAOW,EAAcA,cACrBtB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAM6C,EAA+B,YAChCf,EAAKa,eAEVE,EAAiBD,GAAjB,2BACKC,EAAiBD,IADtB,IAEED,cAAetD,SAASW,EAAMoC,OAAOJ,SAOvCR,EALiC,CAC/BW,SAAUU,EACVR,gBAAiBN,EACjBO,cAAe,qBAjBvB,YAwBA,+BACE,qBACElB,KAAK,SACLY,MAAOW,EAAcG,GACrBzB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAM6C,EAA+B,YAChCf,EAAKa,eAEVE,EAAiBD,GAAjB,2BACKC,EAAiBD,IADtB,IAEEE,GAAIzD,SAASW,EAAMoC,OAAOJ,SAO5BR,EALiC,CAC/BW,SAAUU,EACVR,gBAAiBN,EACjBO,cAAe,qBAjBvB,aA/CO,gBAAkBM,UA8ErC,4BACE,+BACE,qBACExB,KAAK,WACLmB,QAAST,EAAKiB,KAAKpE,SACnBsD,SAAU,SAACjC,GACT,IAAMgD,EAAa,2BACdlB,EAAKiB,MADS,IAEjBpE,SAAUqB,EAAMoC,OAAOG,UAOzBf,EALiC,CAC/BW,SAAUa,EACVX,gBAAiBN,EACjBO,cAAe,YAZvB,YAmBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKiB,KAAKA,KACjB1B,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMgD,EAAa,2BACdlB,EAAKiB,MADS,IAEjBA,KAAM1D,SAASW,EAAMoC,OAAOJ,SAO9BR,EALiC,CAC/BW,SAAUa,EACVX,gBAAiBN,EACjBO,cAAe,YAdvB,eAsBF,4BACE,+BACE,qBACElB,KAAK,WACLmB,QAAST,EAAKmB,iBAAiBtE,SAC/BsD,SAAU,SAACjC,GACT,IAAMkD,EAAoC,2BACrCpB,EAAKmB,kBADgC,IAExCtE,SAAUqB,EAAMoC,OAAOG,UAOzBf,EALiC,CAC/BW,SAAUe,EACVb,gBAAiBN,EACjBO,cAAe,wBAZvB,YAmBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKmB,iBAAiBN,cAC7BtB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMkD,EAAoC,2BACrCpB,EAAKmB,kBADgC,IAExCN,cAAetD,SAASW,EAAMoC,OAAOJ,SAOvCR,EALiC,CAC/BW,SAAUe,EACVb,gBAAiBN,EACjBO,cAAe,wBAdvB,2BAqBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKmB,iBAAiBE,IAC7B9B,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMkD,EAAoC,2BACrCpB,EAAKmB,kBADgC,IAExCE,IAAK9D,SAASW,EAAMoC,OAAOJ,SAO7BR,EALiC,CAC/BW,SAAUe,EACVb,gBAAiBN,EACjBO,cAAe,wBAdvB,mBAqBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKmB,iBAAiBH,GAC7BzB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMkD,EAAoC,2BACrCpB,EAAKmB,kBADgC,IAExCH,GAAIzD,SAASW,EAAMoC,OAAOJ,SAO5BR,EALiC,CAC/BW,SAAUe,EACVb,gBAAiBN,EACjBO,cAAe,wBAdvB,sBAsBF,4BACE,+BACE,qBACElB,KAAK,WACLmB,QAAST,EAAKsB,iBAAiBzE,SAC/BsD,SAAU,SAACjC,GACT,IAAMqD,EAAoC,2BACrCvB,EAAKsB,kBADgC,IAExCzE,SAAUqB,EAAMoC,OAAOG,UAOzBf,EALiC,CAC/BW,SAAUkB,EACVhB,gBAAiBN,EACjBO,cAAe,wBAZvB,YAmBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKsB,iBAAiBT,cAC7BtB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMqD,EAAoC,2BACrCvB,EAAKsB,kBADgC,IAExCT,cAAetD,SAASW,EAAMoC,OAAOJ,SAOvCR,EALiC,CAC/BW,SAAUkB,EACVhB,gBAAiBN,EACjBO,cAAe,wBAdvB,2BAqBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKsB,iBAAiBD,IAC7B9B,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMqD,EAAoC,2BACrCvB,EAAKsB,kBADgC,IAExCD,IAAK9D,SAASW,EAAMoC,OAAOJ,SAO7BR,EALiC,CAC/BW,SAAUkB,EACVhB,gBAAiBN,EACjBO,cAAe,wBAdvB,mBAqBA,+BACE,qBACElB,KAAK,SACLY,MAAOF,EAAKsB,iBAAiBN,GAC7BzB,IAAI,IACJC,IAAI,MACJW,SAAU,SAACjC,GACT,IAAMqD,EAAoC,2BACrCvB,EAAKsB,kBADgC,IAExCN,GAAIzD,SAASW,EAAMoC,OAAOJ,SAO5BR,EALiC,CAC/BW,SAAUkB,EACVhB,gBAAiBN,EACjBO,cAAe,wBAdvB,wBApYK,WAAaP,eCzB9BuB,G,MAAkB,CACtBzE,MAAO,GACPgB,KAAM,QACNlB,UAAU,EACV6D,cAAe,CACb,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,IAEpCG,cAAe,CACb,CAAEhE,UAAU,EAAOgE,cAAe,EAAGQ,IAAK,EAAGL,GAAI,GACjD,CAAEnE,UAAU,EAAOgE,cAAe,EAAGQ,IAAK,EAAGL,GAAI,IAEnDC,KAAM,CAAEpE,UAAU,EAAOoE,KAAM,GAC/BE,iBAAkB,CAChBtE,UAAU,EACVgE,cAAe,EACfQ,IAAK,EACLL,GAAI,GAENM,iBAAkB,CAChBzE,UAAU,EACVgE,cAAe,EACfQ,IAAK,EACLL,GAAI,KAMFhE,EAFoByE,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAMH,KAE5BzB,KAAI,SAACC,EAAMC,GACxC,IAAM2B,EAAY,eAAQ5B,GAqB1B,OApBA4B,EAAa7E,MAAkB,IAAVkD,EAAc,aAAeD,EAAKjD,MACvD6E,EAAa7D,KAAOkC,EAAQ,EAAI,SAAW,QAC3C2B,EAAalB,cACD,IAAVT,EACI,CACE,CAAEpD,UAAU,EAAM6D,cAAe,GACjC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,GAClC,CAAE7D,UAAU,EAAO6D,cAAe,IAEpCV,EAAKU,cACXkB,EAAaf,cAAgB,CAC3B,CAAEhE,UAAU,EAAMgE,cAAeZ,EAAOoB,IAAK,EAAGL,GAAI,KACpD,CAAEnE,UAAU,EAAOgE,cAAe,EAAGQ,IAAK,EAAGL,GAAI,IAEnDY,EAAaX,KAAO,CAClBpE,UAAU,EACVoE,KAAM,GAAKhB,GAEN2B,K,QLtGHC,EAAO,IMaX,aAAe,IAAD,gCAPdC,OAAsC,KAOxB,KANdC,QAAwC,KAM1B,KALdC,eAKc,OAJdC,uBAIc,OAHdC,cAGc,OAFdC,YAAsB,EAER,KA2BdC,KAAO,WACL,OAAOC,UACJC,kBAAkB,CAAEC,OAAO,IAC3BC,KAAK,EAAKC,UAAW,EAAKC,YA9BjB,KAgCdD,UAAY,SAACE,GACX,EAAKb,OAASa,EAAWb,QAAU,KACnC,EAAKC,QAAUY,EAAWZ,SAAW,KACrC,EAAKa,eAAe,GAEpB,OAD0B,GApCd,KAuCdF,UAAY,WACVG,QAAQC,IAAI,uCAEZ,OAD0B,GAzCd,KA4CdF,eAAiB,SAACT,GAChB,EAAKA,YAAcA,GA7CP,KA+CdY,gBAAkB,SAChBzD,EACA0D,EACAC,GAEA,GAAI,EAAKlB,QAAS,CAChB,IAAMmB,EAAS,EAAKnB,QAAQoB,SAASC,OAAOlD,MACtCmD,EAAc9F,SAAS,EAAK2E,SAAS5C,GAAQ,EAAK6C,aAClDmB,EACK,kBAAThE,EACI,CAAC+D,EAAaL,GACd,CAACK,EAAaL,EAAcC,GAElCC,EAAOK,KAAKD,KA3DdE,KAAKvB,mBAAoB,EACzBuB,KAAKxB,UAAY,CACfyB,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,OACHC,EAAG,KACHC,EAAG,MACHC,EAAG,QACHC,EAAG,MACHC,EAAG,SAELhB,KAAKtB,SAAW,CACduC,QAAS,MACTC,OAAQ,MACR7D,cAAe,MACfH,cAAe,QNlCjB,sBAAuB2B,WACzB5F,EAAcoF,EAAKO,OACnB1F,GAAc,IAEdD,GAAc,EACdC,GAAc,GAGhB,IAsKeiI,EAtKH,SAAC,GAA8C,IAAD,IAA3CC,cAA2C,MAAlC5H,EAAkC,EACxD,EAAoCE,mBAAiB0H,GAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,EAA6C5H,oBAAkB,GAA/D,mBAAO6H,EAAP,KAAuBC,EAAvB,KACMC,EAAwB,kBAAMD,GAAoBD,IASxD,EAAoD7H,mBAN9B2H,EACjBK,QAAO,SAAClF,GAAD,OAAUA,EAAKnD,YACtBkD,KAAI,SAACC,GAAD,OAAU6E,EAAWM,QAAQnF,OAItC,mBAAOoF,EAAP,KAA2BC,EAA3B,KAIMpI,EAAmB,SAACgD,GACxB,GAAImF,EAAmBE,SAASrF,GAG9B,OAFAoF,EAAsBD,EAAmBF,QAAO,SAAClF,GAAD,OAAUA,IAASC,WACnEsF,EAAStF,GAGXoF,EAAsB,GAAD,mBAAKD,GAAL,CAAyBnF,KAC1CxD,GACF8I,EAAStF,GAAO,IAKdsF,EAAW,SAACtF,EAAeuF,GAC/B,IAAMC,EAAiBZ,EAAW5E,GAAOY,cACtCqE,QAAO,SAAClF,GAAD,OAAUA,EAAKnD,YACtBkD,KAAI,SAACC,GACJ,MAAO,CAAEa,cAAeb,EAAKa,cAAeG,GAAIhB,EAAKgB,GAAIK,IAAKrB,EAAKqB,QAEjEJ,EAAO4D,EAAW5E,GAAOgB,KAAKpE,SAChCgI,EAAW5E,GAAOgB,KAAKA,UACvByE,EACJ,GAAIF,EAAQ,CACV,IADU,EACJG,EAAiBd,EAAW5E,GAAOS,cACtCwE,QAAO,SAAClF,GAAD,OAAUA,EAAKnD,YACtBkD,KAAI,SAACC,GAAD,OAAUA,EAAKU,iBAHZ,cAIkBiF,GAJlB,IAIV,2BAA4C,CAAC,IAAlCjF,EAAiC,QAC1CmB,EAAKkB,gBAAgB,gBAAiBrC,EAAe,IAL7C,kDAOkB+E,GAPlB,IAOV,2BAA4C,CAAC,IAAlC5E,EAAiC,QAC1CgB,EAAKkB,gBACH,gBACAlC,EAAcA,cACdA,EAAcG,KAXR,8BAcNC,GACFY,EAAKkB,gBAAgB,SAAU9B,EAAM,SAElC,CAAC,IAAD,gBACuBwE,GADvB,IACL,2BAA4C,CAAC,IAAlC5E,EAAiC,QAC1CgB,EAAKkB,gBACH,gBACAlC,EAAcA,cACdA,EAAcQ,MALb,8BAQDJ,GACFY,EAAKkB,gBAAgB,UAAW9B,EAAM,OAKtC2E,EAAalI,YAAH,4+BA0BVmI,EAAUnI,YAAH,8FAMPoI,EAAapI,YAAH,8CACLjB,EAAc,QAAU,OAG7BsJ,EAAerI,YAAH,+CAIZsI,EAAoBvE,MAAMC,KAAKD,MAAM,IAAIwE,QAE/C,OACE,mBAAKvI,IAAKkI,EAAV,UACE,mBAAKlI,IAAKmI,EAAV,UACE,uCACA,iBAAGnI,IAAKoI,EAAR,kBAA0BrJ,EAAc,GAAK,MAA7C,eACA,iBAAGiB,IAAKqI,EAAR,SACGtJ,EACG,KACAC,EACA,wCACA,yDAEN,sBAAQ4C,KAAK,SAASQ,QAASmF,EAA/B,iCAIDe,EAAkBjG,KAAI,SAACE,GACtB,OACE,YAAC,EAAD,CACElD,OAAQkD,EAAQ,GAAGiG,WACnBlJ,KAAM6H,EAAW5E,GACjBpD,SAAUuI,EAAmBE,SAASrF,GACtChD,iBAAkBA,GACb,aAAegD,MAI1B,YAAC,EAAD,CAAalD,MAAM,OACnB,YAAC,EAAD,CAAaA,MAAM,SACnB,YAAC,EAAD,CAAkBA,MAAM,MACxB,YAAC,EAAD,CAAkBA,MAAM,MACxB,YAAC,EAAD,CACEC,KAAM6H,EACNnF,WA3JiC,SAAC,GAIb,IAHzBW,EAGwB,EAHxBA,SACAE,EAEwB,EAFxBA,gBACAC,EACwB,EADxBA,cAEM2F,EAAqB,YAAOtB,GAClCsB,EAAc5F,GAAd,2BACK4F,EAAc5F,IADnB,kBAEGC,EAAgBH,IAEnByE,EAAcqB,IAkJVxG,UAAWoF,EACXnF,iBAAkBqF,QO7KNmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBhF,WACrBA,UAAUiF,cAAcC,MACrB/E,MAAK,SAACgF,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN9E,QAAQ8E,MAAMA,EAAMC,YEpH5BnB,M","file":"static/js/main.3ce59202.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { useState } from \"react\"\nimport { css } from \"@emotion/react\"\nimport { CFootswitch } from \"./components/footswitch\"\nimport { CExpressionPedal } from \"./components/expressionPedal\"\nimport { CModal } from \"./components/modal\"\nimport \"./App.css\"\nimport { data, Pedals, UpdatePedalsParams, UpdatePedals } from \"./data/data\"\nimport { Midi } from \"./scripts/midi\"\n\ninterface AppProps {\n  pedals?: Pedals\n}\n\nconst midi = new Midi()\nlet midiSuccess: boolean | Promise<boolean>\nlet midiSupport: boolean\nif (\"requestMIDIAccess\" in navigator) {\n  midiSuccess = midi.init()\n  midiSupport = true\n} else {\n  midiSuccess = false\n  midiSupport = false\n}\n\nconst App = ({ pedals = data }: AppProps): JSX.Element => {\n  const [pedalsData, setPedalsData] = useState<Pedals>(pedals)\n\n  const updatePedalsData: UpdatePedals = ({\n    newValue,\n    pedalsDataIndex,\n    pedalsDataKey,\n  }: UpdatePedalsParams) => {\n    const newPedalsData: Pedals = [...pedalsData]\n    newPedalsData[pedalsDataIndex] = {\n      ...newPedalsData[pedalsDataIndex],\n      [pedalsDataKey]: newValue,\n    }\n    setPedalsData(newPedalsData)\n  }\n\n  const [modalIsVisible, setModalVisibility] = useState<boolean>(false)\n  const toggleModalVisibility = () => setModalVisibility(!modalIsVisible)\n\n  const getActiveFootswitches = () => {\n    const activeItems = pedalsData\n      .filter((item) => item.isActive)\n      .map((item) => pedalsData.indexOf(item))\n    return activeItems\n  }\n\n  const [activeFootswitches, setActiveFootswitches] = useState(\n    getActiveFootswitches()\n  )\n\n  const toggleFootswitch = (index: number): void => {\n    if (activeFootswitches.includes(index)) {\n      setActiveFootswitches(activeFootswitches.filter((item) => item !== index))\n      sendMidi(index)\n      return\n    }\n    setActiveFootswitches([...activeFootswitches, index])\n    if (midiSuccess) {\n      sendMidi(index, true)\n    }\n    return\n  }\n\n  const sendMidi = (index: number, sendOn?: boolean) => {\n    const controlChanges = pedalsData[index].controlChange\n      .filter((item) => item.isActive)\n      .map((item) => {\n        return { controlChange: item.controlChange, on: item.on, off: item.off }\n      })\n    const note = pedalsData[index].note.isActive\n      ? pedalsData[index].note.note\n      : undefined\n    if (sendOn) {\n      const programChanges = pedalsData[index].programChange\n        .filter((item) => item.isActive)\n        .map((item) => item.programChange)\n      for (const programChange of programChanges) {\n        midi.sendMidiMessage(\"programChange\", programChange, 0)\n      }\n      for (const controlChange of controlChanges) {\n        midi.sendMidiMessage(\n          \"controlChange\",\n          controlChange.controlChange,\n          controlChange.on\n        )\n      }\n      if (note) {\n        midi.sendMidiMessage(\"noteOn\", note, 127)\n      }\n    } else {\n      for (const controlChange of controlChanges) {\n        midi.sendMidiMessage(\n          \"controlChange\",\n          controlChange.controlChange,\n          controlChange.off\n        )\n      }\n      if (note) {\n        midi.sendMidiMessage(\"noteOff\", note, 127)\n      }\n    }\n  }\n\n  const sContainer = css`\n    label: container;\n    display: grid;\n    padding: 5px;\n    grid-template-columns: repeat(18, calc((100vh - 10px) / 18));\n    grid-template-rows: 0.5fr 1fr 1fr;\n    gap: 5px 0px;\n    grid-template-areas:\n      \". header header header header header header header header header header header header header header header header header\"\n      \". footswitch6 . footswitch7 . footswitch8 . footswitch9 . footswitch10 . footswitchUp . expressionPedalA expressionPedalA . expressionPedalB expressionPedalB\"\n      \"footswitch1 . footswitch2 . footswitch3 . footswitch4 . footswitch5 . . footswitchDown . expressionPedalA expressionPedalA . expressionPedalB expressionPedalB\";\n    background-color: #eee;\n    height: 100vw;\n    overflow: hidden;\n\n    @media (min-width: 568px) {\n      grid-template-columns: repeat(18, calc((100vw - 10px) / 18));\n      height: 100vh;\n      width: 100vw;\n    }\n\n    @media (min-width: 1024px) {\n      max-height: 40vw;\n    }\n  `\n\n  const sHeader = css`\n    label: header;\n    padding: 10px;\n    grid-area: header;\n  `\n\n  const sMidiState = css`\n    color: ${midiSuccess ? \"green\" : \"red\"};\n  `\n\n  const sMidiSupport = css`\n    color: red;\n  `\n\n  const footswitchNumbers = Array.from(Array(10).keys())\n\n  return (\n    <div css={sContainer}>\n      <div css={sHeader}>\n        <h1>FCB1010</h1>\n        <p css={sMidiState}>MIDI {midiSuccess ? \"\" : \"dis\"}connected</p>\n        <p css={sMidiSupport}>\n          {midiSuccess\n            ? null\n            : midiSupport\n            ? \"Please allow your browser to use MIDI\"\n            : \"Your browser doesn't support MIDI, please use Chrome\"}\n        </p>\n        <button type=\"button\" onClick={toggleModalVisibility}>\n          edit MIDI values\n        </button>\n      </div>\n      {footswitchNumbers.map((index: number) => {\n        return (\n          <CFootswitch\n            label={(index + 1).toString()}\n            data={pedalsData[index]}\n            isActive={activeFootswitches.includes(index)}\n            toggleFootswitch={toggleFootswitch}\n            key={\"footswitch\" + index}\n          />\n        )\n      })}\n      <CFootswitch label=\"Up\" />\n      <CFootswitch label=\"Down\" />\n      <CExpressionPedal label=\"A\" />\n      <CExpressionPedal label=\"B\" />\n      <CModal\n        data={pedalsData}\n        updateData={updatePedalsData}\n        isVisible={modalIsVisible}\n        toggleVisibility={toggleModalVisibility}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import styled from \"@emotion/styled\"\n\ntype ledProps = {\n  isActive: boolean\n}\n\nconst SCLed = styled(\"div\")<ledProps>`\n  label: led;\n  background-color: ${({ isActive }) => (isActive ? \"#ff0000\" : \"#600\")};\n  width: 10px;\n  height: 10px;\n  border-radius: 100%;\n  border: 2px solid #fff;\n  box-shadow: ${({ isActive }) => (isActive ? \"0 0 5px 2px #ff0000\" : \"none\")};\n`\n\nexport { SCLed }\n","/** @jsxImportSource @emotion/react */\nimport { useState, MouseEvent } from \"react\"\nimport { css } from \"@emotion/react\"\nimport { SCLed } from \"./led\"\nimport { Pedal } from \"../data/data\"\n\ntype FootswitchProps =\n  | {\n      label: string\n      data: Pedal\n      isActive: boolean\n      toggleFootswitch: (index: number) => void\n    }\n  | {\n      label: string\n      data?: Pedal\n      isActive?: boolean\n      toggleFootswitch?: (index: number) => void\n    }\n\nconst CFootswitch = ({\n  label,\n  data,\n  isActive,\n  toggleFootswitch,\n}: FootswitchProps): JSX.Element => {\n  const [isPressed, setPressed] = useState<boolean>(false)\n  const togglePressed = () => {\n    setPressed(!isPressed)\n  }\n\n  const preventContextMenu = (event: MouseEvent) => {\n    event.preventDefault()\n  }\n\n  const footswitchIndex = parseInt(label) - 1\n\n  const toggleActive = () => {\n    if (toggleFootswitch) {\n      toggleFootswitch(footswitchIndex)\n    }\n  }\n\n  const sFootswitch = css`\n    label: footswitch;\n    grid-area: ${\"footswitch\" + label};\n    position: relative;\n    border: 1px solid #ccc;\n    text-align: center;\n    padding: 10px;\n    background-color: ${isPressed ? \"#222\" : \"#000\"};\n    color: #fff;\n    font-weight: bold;\n    border-radius: 10px;\n    transform: ${isPressed ? \"scale(0.98)\" : \"none\"};\n    transition: background-color 0.2s;\n\n    p {\n      margin: 0;\n    }\n\n    small {\n      font-weight: normal;\n      word-break: break-word;\n    }\n  `\n\n  const sFootswitchToggle = css`\n    label: footswitch__toggle;\n    position: absolute;\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    height: 50%;\n    right: 0;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    padding: 10px;\n    background-color: rgba(255, 255, 255, 0.25);\n    cursor: pointer;\n    font-weight: normal;\n    font-size: 14px;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n  `\n\n  return (\n    <div css={sFootswitch}>\n      {data ? <SCLed isActive={!!isActive} /> : null}\n      <p>{label}</p>\n      <div\n        css={sFootswitchToggle}\n        onMouseDown={() => {\n          toggleActive()\n          togglePressed()\n        }}\n        onTouchStart={() => {\n          toggleActive()\n          togglePressed()\n        }}\n        onMouseUp={\n          data && data.mode === \"toggle\"\n            ? togglePressed\n            : () => {\n                toggleActive()\n                togglePressed()\n              }\n        }\n        onTouchEnd={() => {\n          toggleActive()\n          togglePressed()\n        }}\n        onContextMenu={preventContextMenu}\n      >\n        {data && data.mode}\n      </div>\n    </div>\n  )\n}\n\nexport { CFootswitch }\n","/** @jsxImportSource @emotion/react */\nimport { useRef, useState, MouseEvent, useEffect } from \"react\"\nimport { css } from \"@emotion/react\"\n\ninterface ExpressionPedalProps {\n  label: string\n}\n\nconst CExpressionPedal = ({\n  label,\n}: ExpressionPedalProps): JSX.Element => {\n  const sliderContainer = useRef<HTMLDivElement>(null)\n  const slider = useRef<HTMLInputElement>(null)\n\n  const [sliderDimensions, setSliderDimensions] = useState<{\n    width: string\n    height: string\n  }>({ width: \"100%\", height: \"100%\" })\n\n  const [isPressed, setPressed] = useState<boolean>(false)\n  const togglePressed = () => setPressed(!isPressed)\n\n  const preventContextMenu = (event: MouseEvent) => {\n    event.preventDefault()\n  }\n\n  useEffect(() => {\n    const width = sliderContainer.current\n      ? sliderContainer.current.offsetHeight + \"px\"\n      : \"100%\"\n    const height = sliderContainer.current\n      ? sliderContainer.current.offsetWidth + \"px\"\n      : \"100%\"\n    setSliderDimensions({ height, width })\n  }, [])\n\n  const sExpressionPedal = css`\n    label: expression-pedal;\n    border: 1px solid #ccc;\n    grid-area: expressionPedal${label};\n    text-align: center;\n    background-color: ${isPressed ? \"#222\" : \"#000\"};\n    color: #fff;\n    font-weight: bold;\n    border-radius: 10px;\n    transform: ${isPressed ? \"scale(0.98)\" : \"none\"};\n    transition: background-color 0.2s;\n    position: relative;\n    padding: 10px 10px 10px calc(50% + 10px);\n\n    p {\n      margin: 0;\n    }\n\n    small {\n      font-weight: normal;\n      word-break: break-word;\n    }\n  `\n\n  const sExpressionPedalSliderContainer = css`\n    label: expression-pedal__slider-container;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    height: 100%;\n    width: 50%;\n    padding: 10px;\n    background-color: rgba(255, 255, 255, 0.25);\n    font-weight: normal;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    label {\n      position: absolute;\n      bottom: 10px;\n      user-select: none;\n    }\n\n    input[type=\"range\"]::-webkit-slider-thumb,\n    input[type=\"range\"]::-moz-range-thumb,\n    input[type=\"range\"]::-ms-thumb {\n      box-shadow: none;\n      appearance: none;\n      height: 300px;\n      width: 2px;\n      background: #fff;\n      border: none;\n    }\n  `\n\n  const sExpressionPedalSlider = css`\n    label: expression-pedal__slider;\n    cursor: pointer;\n    flex: 0 0 calc(${sliderDimensions.width} - 4px);\n    height: ${sliderDimensions.height};\n    transform: rotate(-90deg);\n    appearance: none;\n    margin: 0;\n    background: transparent;\n    -webkit-tap-highlight-color: transparent;\n    margin: 0;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n\n    &::-webkit-slider-thumb,\n    &::-moz-range-thumb,\n    &::-ms-thumb {\n      box-shadow: none;\n      appearance: none;\n      height: 300px;\n      width: 2px;\n      background: #fff;\n      border: none;\n    }\n  `\n\n  return (\n    <div css={sExpressionPedal}>\n      <p>{label}</p>\n\n      <div\n        css={sExpressionPedalSliderContainer}\n        onMouseDown={togglePressed}\n        onTouchStart={togglePressed}\n        onMouseUp={togglePressed}\n        onTouchEnd={togglePressed}\n        onContextMenu={preventContextMenu}\n        ref={sliderContainer}\n      >\n        <label htmlFor=\"slide\">slide</label>\n        <input\n          css={sExpressionPedalSlider}\n          name=\"slide\"\n          type=\"range\"\n          min=\"0\"\n          max=\"127\"\n          ref={slider}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport { CExpressionPedal }\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\"\nimport {\n  Pedals,\n  UpdatePedals,\n  UpdatePedalsParams,\n  ProgramChange,\n  ControlChange,\n  Note,\n  ExpressionPedal,\n} from \"../data/data\"\n\ninterface ModalProps {\n  data: Pedals\n  updateData: UpdatePedals\n  isVisible: boolean\n  toggleVisibility: () => void\n}\n\nconst CModal = ({\n  data,\n  updateData,\n  isVisible = false,\n  toggleVisibility,\n}: ModalProps): JSX.Element => {\n  const sModal = css`\n    label: modal;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background-color: #fff;\n    transform: ${isVisible ? \"none\" : \"translateY(-100%)\"};\n    opacity: ${isVisible ? \"1\" : \"0\"};\n    overflow: auto;\n\n    table {\n      border-collapse: collapse;\n      margin: 0 auto;\n    }\n\n    tbody > tr:nth-of-type(odd) {\n      background-color: #eee;\n    }\n\n    th,\n    td {\n      border: 1px solid black;\n      text-align: left;\n      padding: 5px;\n      vertical-align: top;\n    }\n\n    label {\n      display: block;\n    }\n\n    ol {\n      margin: 0;\n      padding-left: 20px;\n    }\n  `\n\n  return (\n    <div css={sModal}>\n      <button type=\"button\" onClick={toggleVisibility}>\n        stop editing\n      </button>\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Label</th>\n            <th>Mode</th>\n            <th>Program Change</th>\n            <th>Control Change</th>\n            <th>Note</th>\n            <th>Expression Pedal A</th>\n            <th>Expression Pedal B</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => {\n            return (\n              <tr key={\"tablerow\" + index}>\n                <td>{index + 1}</td>\n\n                <td>\n                  <label>\n                    <input\n                      type=\"text\"\n                      value={item.label}\n                      onChange={(event) => {\n                        const args: UpdatePedalsParams = {\n                          newValue: event.target.value,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"label\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Label\n                  </label>\n                </td>\n\n                <td>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name={\"mode\" + index}\n                      value=\"toggle\"\n                      checked={item.mode === \"toggle\"}\n                      onChange={(event) => {\n                        const args: UpdatePedalsParams = {\n                          newValue: event.target.value,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"mode\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Toggle\n                  </label>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name={\"mode\" + index}\n                      value=\"press\"\n                      checked={item.mode === \"press\"}\n                      onChange={(event) => {\n                        const args: UpdatePedalsParams = {\n                          newValue: event.target.value,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"mode\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Press\n                  </label>\n                </td>\n\n                <td>\n                  <ol>\n                    {item.programChange.map(\n                      (programChange, programChangeIndex) => {\n                        return (\n                          <li key={\"programchange\" + programChangeIndex}>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                checked={programChange.isActive}\n                                onChange={(event) => {\n                                  const newProgramChange: ProgramChange = [\n                                    ...item.programChange,\n                                  ]\n                                  newProgramChange[programChangeIndex] = {\n                                    ...newProgramChange[programChangeIndex],\n                                    isActive: event.target.checked,\n                                  }\n                                  const args: UpdatePedalsParams = {\n                                    newValue: newProgramChange,\n                                    pedalsDataIndex: index,\n                                    pedalsDataKey: \"programChange\",\n                                  }\n                                  updateData(args)\n                                }}\n                              />\n                              Active\n                            </label>\n                            <label>\n                              <input\n                                type=\"number\"\n                                value={programChange.programChange}\n                                min=\"0\"\n                                max=\"127\"\n                                onChange={(event) => {\n                                  const newProgramChange: ProgramChange = [\n                                    ...item.programChange,\n                                  ]\n                                  newProgramChange[programChangeIndex] = {\n                                    ...newProgramChange[programChangeIndex],\n                                    programChange: parseInt(event.target.value),\n                                  }\n                                  const args: UpdatePedalsParams = {\n                                    newValue: newProgramChange,\n                                    pedalsDataIndex: index,\n                                    pedalsDataKey: \"programChange\",\n                                  }\n                                  updateData(args)\n                                }}\n                              />\n                              Number\n                            </label>\n                          </li>\n                        )\n                      }\n                    )}\n                  </ol>\n                </td>\n\n                <td>\n                  <ol>\n                    {item.controlChange.map(\n                      (controlChange, controlChangeIndex) => {\n                        return (\n                          <li key={\"controlchange\" + controlChangeIndex}>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                checked={controlChange.isActive}\n                                onChange={(event) => {\n                                  const newControlChange: ControlChange = [\n                                    ...item.controlChange,\n                                  ]\n                                  newControlChange[controlChangeIndex] = {\n                                    ...newControlChange[controlChangeIndex],\n                                    isActive: event.target.checked,\n                                  }\n                                  const args: UpdatePedalsParams = {\n                                    newValue: newControlChange,\n                                    pedalsDataIndex: index,\n                                    pedalsDataKey: \"controlChange\",\n                                  }\n                                  updateData(args)\n                                }}\n                              />\n                              Active\n                            </label>\n                            <label>\n                              <input\n                                type=\"number\"\n                                value={controlChange.controlChange}\n                                min=\"0\"\n                                max=\"127\"\n                                onChange={(event) => {\n                                  const newControlChange: ControlChange = [\n                                    ...item.controlChange,\n                                  ]\n                                  newControlChange[controlChangeIndex] = {\n                                    ...newControlChange[controlChangeIndex],\n                                    controlChange: parseInt(event.target.value),\n                                  }\n                                  const args: UpdatePedalsParams = {\n                                    newValue: newControlChange,\n                                    pedalsDataIndex: index,\n                                    pedalsDataKey: \"controlChange\",\n                                  }\n                                  updateData(args)\n                                }}\n                              />\n                              Number\n                            </label>\n                            <label>\n                              <input\n                                type=\"number\"\n                                value={controlChange.on}\n                                min=\"0\"\n                                max=\"127\"\n                                onChange={(event) => {\n                                  const newControlChange: ControlChange = [\n                                    ...item.controlChange,\n                                  ]\n                                  newControlChange[controlChangeIndex] = {\n                                    ...newControlChange[controlChangeIndex],\n                                    on: parseInt(event.target.value),\n                                  }\n                                  const args: UpdatePedalsParams = {\n                                    newValue: newControlChange,\n                                    pedalsDataIndex: index,\n                                    pedalsDataKey: \"controlChange\",\n                                  }\n                                  updateData(args)\n                                }}\n                              />\n                              Value\n                            </label>\n                          </li>\n                        )\n                      }\n                    )}\n                  </ol>\n                </td>\n\n                <td>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={item.note.isActive}\n                      onChange={(event) => {\n                        const newNote: Note = {\n                          ...item.note,\n                          isActive: event.target.checked,\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newNote,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"note\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Active\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.note.note}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newNote: Note = {\n                          ...item.note,\n                          note: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newNote,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"note\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Number\n                  </label>\n                </td>\n                <td>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={item.expressionPedalA.isActive}\n                      onChange={(event) => {\n                        const newExpressionPedalA: ExpressionPedal = {\n                          ...item.expressionPedalA,\n                          isActive: event.target.checked,\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalA,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalA\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Active\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalA.controlChange}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalA: ExpressionPedal = {\n                          ...item.expressionPedalA,\n                          controlChange: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalA,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalA\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Control Change Number\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalA.off}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalA: ExpressionPedal = {\n                          ...item.expressionPedalA,\n                          off: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalA,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalA\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Minimum Value\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalA.on}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalA: ExpressionPedal = {\n                          ...item.expressionPedalA,\n                          on: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalA,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalA\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Maximum Value\n                  </label>\n                </td>\n                <td>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={item.expressionPedalB.isActive}\n                      onChange={(event) => {\n                        const newExpressionPedalB: ExpressionPedal = {\n                          ...item.expressionPedalB,\n                          isActive: event.target.checked,\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalB,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalB\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Active\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalB.controlChange}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalB: ExpressionPedal = {\n                          ...item.expressionPedalB,\n                          controlChange: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalB,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalB\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Control Change Number\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalB.off}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalB: ExpressionPedal = {\n                          ...item.expressionPedalB,\n                          off: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalB,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalB\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Minimum Value\n                  </label>\n                  <label>\n                    <input\n                      type=\"number\"\n                      value={item.expressionPedalB.on}\n                      min=\"0\"\n                      max=\"127\"\n                      onChange={(event) => {\n                        const newExpressionPedalB: ExpressionPedal = {\n                          ...item.expressionPedalB,\n                          on: parseInt(event.target.value),\n                        }\n                        const args: UpdatePedalsParams = {\n                          newValue: newExpressionPedalB,\n                          pedalsDataIndex: index,\n                          pedalsDataKey: \"expressionPedalB\",\n                        }\n                        updateData(args)\n                      }}\n                    />\n                    Maximum Value\n                  </label>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport { CModal }\n","type Mode = \"toggle\" | \"press\"\n\ntype ProgramChangeItem = {\n  isActive: boolean\n  programChange: number\n}\n\ntype ProgramChange = [\n  ProgramChangeItem,\n  ProgramChangeItem,\n  ProgramChangeItem,\n  ProgramChangeItem,\n  ProgramChangeItem\n]\n\ntype ControlChangeItem = {\n  isActive: boolean\n  controlChange: number\n  off: number\n  on: number\n}\n\ntype ControlChange = [ControlChangeItem, ControlChangeItem]\n\ntype Note = {\n  isActive: boolean\n  note: number\n}\n\ntype ExpressionPedal = {\n  isActive: boolean\n  controlChange: number\n  off: number\n  on: number\n}\n\ninterface Pedal {\n  label: string\n  mode: Mode\n  isActive: boolean\n  programChange: ProgramChange\n  controlChange: ControlChange\n  note: Note\n  expressionPedalA: ExpressionPedal\n  expressionPedalB: ExpressionPedal\n}\n\n// TODO: decide whether Pedals should be of type `tuple` or `array`\n// type Pedals = [\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal,\n//   Pedal\n// ]\ntype Pedals = Pedal[]\n\nconst dataItem: Pedal = {\n  label: \"\",\n  mode: \"press\",\n  isActive: false,\n  programChange: [\n    { isActive: false, programChange: 0 },\n    { isActive: false, programChange: 0 },\n    { isActive: false, programChange: 0 },\n    { isActive: false, programChange: 0 },\n    { isActive: false, programChange: 0 },\n  ],\n  controlChange: [\n    { isActive: false, controlChange: 0, off: 0, on: 0 },\n    { isActive: false, controlChange: 0, off: 0, on: 0 },\n  ],\n  note: { isActive: false, note: 0 },\n  expressionPedalA: {\n    isActive: false,\n    controlChange: 0,\n    off: 0,\n    on: 0,\n  },\n  expressionPedalB: {\n    isActive: false,\n    controlChange: 0,\n    off: 0,\n    on: 0,\n  },\n}\n\nconst basicData: Pedals = Array.from({ length: 10 }, () => dataItem)\n\nconst data: Pedals = basicData.map((item, index) => {\n  const extendedItem = { ...item }\n  extendedItem.label = index === 1 ? \"Test label\" : item.label\n  extendedItem.mode = index % 3 ? \"toggle\" : \"press\"\n  extendedItem.programChange =\n    index === 2\n      ? [\n          { isActive: true, programChange: 1 },\n          { isActive: false, programChange: 0 },\n          { isActive: false, programChange: 0 },\n          { isActive: false, programChange: 0 },\n          { isActive: false, programChange: 0 },\n        ]\n      : item.programChange\n  extendedItem.controlChange = [\n    { isActive: true, controlChange: index, off: 0, on: 127 },\n    { isActive: false, controlChange: 0, off: 0, on: 0 },\n  ]\n  extendedItem.note = {\n    isActive: true,\n    note: 55 + index,\n  }\n  return extendedItem\n})\n\ninterface UpdatePedalsParams {\n  newValue: Pedal[keyof Pedal]\n  pedalsDataIndex: number\n  pedalsDataKey: keyof Pedal\n}\n\ntype UpdatePedals = (params: UpdatePedalsParams) => void\n\nexport { data }\nexport type {\n  Pedal,\n  Pedals,\n  UpdatePedalsParams,\n  UpdatePedals,\n  ProgramChange,\n  ControlChange,\n  Note,\n  ExpressionPedal,\n}\n","interface Messages {\n  noteOn: string\n  noteOff: string\n  controlChange: string\n  programChange: string\n}\n\ninterface MidiBase {\n  init: () => Promise<boolean>\n  onSuccess: (midiAccess: WebMidi.MIDIAccess) => boolean\n  onFailure: () => boolean\n  setMidiChannel: (midiChannel: number) => void\n  sendMidiMessage: (\n    type: keyof Messages,\n    secondNibble: number,\n    thirdNibble?: number\n  ) => void\n}\n\nclass Midi implements MidiBase {\n  inputs: WebMidi.MIDIInputMap | null = null\n  outputs: WebMidi.MIDIOutputMap | null = null\n  inputKeys: { [key: string]: number | string }\n  initWasSuccessful: boolean\n  messages: Messages\n  midiChannel: number = 0\n\n  constructor() {\n    this.initWasSuccessful = false\n    this.inputKeys = {\n      a: 0,\n      s: 1,\n      d: 2,\n      f: 3,\n      g: 4,\n      w: 5,\n      e: 6,\n      r: 7,\n      t: 8,\n      y: 9,\n      j: \"down\",\n      u: \"up\",\n      i: \"aUp\",\n      k: \"aDown\",\n      o: \"bUp\",\n      l: \"bDown\",\n    }\n    this.messages = {\n      noteOff: \"0x8\",\n      noteOn: \"0x9\",\n      controlChange: \"0xb\",\n      programChange: \"0xc\",\n    }\n  }\n  init = (): Promise<boolean> => {\n    return navigator\n      .requestMIDIAccess({ sysex: true })\n      .then(this.onSuccess, this.onFailure)\n  }\n  onSuccess = (midiAccess: WebMidi.MIDIAccess): boolean => {\n    this.inputs = midiAccess.inputs || null\n    this.outputs = midiAccess.outputs || null\n    this.setMidiChannel(1)\n    const initWasSuccessful = true\n    return initWasSuccessful\n  }\n  onFailure = (): boolean => {\n    console.log(\"Could not access your MIDI devices.\")\n    const initWasSuccessful = false\n    return initWasSuccessful\n  }\n  setMidiChannel = (midiChannel: number) => {\n    this.midiChannel = midiChannel\n  }\n  sendMidiMessage = (\n    type: keyof Messages,\n    secondNibble: number,\n    thirdNibble?: number\n  ) => {\n    if (this.outputs) {\n      const output = this.outputs.values().next().value\n      const firstNibble = parseInt(this.messages[type] + this.midiChannel)\n      const dataNibbles =\n        type === \"programChange\"\n          ? [firstNibble, secondNibble]\n          : [firstNibble, secondNibble, thirdNibble]\n      // console.log('start midiMessage', type, dataNibbles, performance.now())\n      output.send(dataNibbles)\n    }\n  }\n}\n\nexport { Midi }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}